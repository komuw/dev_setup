# Documentation: https://nixos.org/manual/nix/stable/#sec-conf-file
# Run `nix show-config` to see full config been used by your nix installation


# A list of URI prefixes to which access is allowed in restricted evaluation mode.
allowed-uris = https://github.com/NixOS, https://github.com/komuw

# If set to true, Nix automatically detects files in the store that have identical contents, and replaces them with hard links to a single copy.
auto-optimise-store = true

# This options specifies the Unix group containing the Nix build user accounts.
# If the build users group is empty, builds will be performed under the uid of the Nix process, this should not be used in multi-user settings with untrusted users.
# We are setting it to empty because of a github issue,
# see: https://github.com/NixOS/nix/issues/697
build-users-group =

# If set to true, builds will be performed in a sandboxed environment.
# The default is true on Linux and false on all other platforms.
sandbox = true

# Causes Nix to print out a stack trace in case of Nix expression evaluation errors.
show-trace = true

# The timeout (in seconds) for establishing connections in the binary cache substituter. 
# It corresponds to curlâ€™s --connect-timeout option.
connect-timeout = 20 # secs

# This option defines the maximum number of seconds that a builder can go without producing any data on standard output or standard error. 
# This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop, or to catch remote builds that are hanging due to network problems. 
# It can be overridden using the --max-silent-time command line switch.
# The value 0 means that there is no timeout. This is also the default.
max-silent-time = 40 # secs

# The timeout (in seconds) for receiving data from servers during download. 
# Nix cancels idle downloads after this timeout's duration.
stalled-download-timeout = 50 # secs

# This option defines the maximum number of seconds that a builder can run. 
# This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop but keep writing to their standard output or standard error. 
# It can be overridden using the --timeout command line switch.
# The value 0 means that there is no timeout. This is also the default.
timeout = 423 # ~7minutes

# The value 0 means that the builder should use all available CPU cores in the system. The default is 1.
cores = 0

# The maximum number of jobs that Nix will try to build in parallel.
# The special value auto causes Nix to use the number of CPUs in your system. The default is 1.
# TODO: because our nix files may be dependent on others, we may need to set this to 1.
max-jobs = auto

# When free disk space in /nix/store drops below min-free during a build, Nix performs a garbage-collection until `max-free` bytes are available or there is no more garbage. 
# A value of 0 (the default) disables this feature.
min-free = 524288000 # bytes (500MB)

# If set to true, Nix automatically detects files in the store that have identical contents, and replaces them with hard links to a single copy. This saves disk space. 
#  If set to false (the default), you can still run nix-store --optimise to get rid of duplicate files.
auto-optimise-store = true
